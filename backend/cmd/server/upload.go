package main

import (
	pb "github.com/Guer-co/hackfs-mdc/backend/cmd/server/pb"
	commontools "github.com/Guer-co/hackfs-mdc/backend/pkg/common"
	"github.com/Guer-co/hackfs-mdc/backend/pkg/models"
	"github.com/Guer-co/hackfs-mdc/backend/pkg/textilehelper"
	"github.com/gogo/protobuf/proto"
	"github.com/libp2p/go-libp2p-core/network"
	"github.com/libp2p/go-libp2p-core/peer"
	"io/ioutil"
	"net/http"
)

// pattern: /protocol-name/request-or-response-message/version
const uploadRequestProtocolName = "/hackfspay3/uploadrequest/0.0.2"
const uploadResponseProtocolName = "/hackfspay3/uploadresponse/0.0.2"

type UploadProtocol struct {
	node     *Node                          // local host
	requests map[string]*pb.UploadRequest   // used to access request data from response handlers
}

func NewUploadProtocol(node *Node) *UploadProtocol {
	e := UploadProtocol{node: node, requests: make(map[string]*pb.UploadRequest)}
	node.SetStreamHandler(uploadRequestProtocolName, e.onUploadRequest)
	node.SetStreamHandler(uploadResponseProtocolName, e.onUploadResponse)

	// design note: to implement fire-and-forget style messages you may just skip specifying a response callback.
	// a fire-and-forget message will just include a request and not specify a response object
	return &e
}

func (e *UploadProtocol) getUploadResponseWithError(req *pb.UploadRequest, code int32, err error) *pb.UploadResponse {
	return &pb.UploadResponse{
		MessageData:          e.node.NewMessageData(req.MessageData.Id, false),
		ResponseData:         &pb.ResponseData{
			Code:                 code,
			Err:                  err.Error(),
		},
		ContentData:          &pb.ContentData{},
	}
}

func (e *UploadProtocol) processUploadRequest(req *pb.UploadRequest) *pb.UploadResponse {
	receivedAt := commontools.GetTimeStampMillisecond()

	receivedFileSize := len(req.UploadData.FileBytes)
	logger.Infof("receivedFileSize: %+v, expectedFileSize %+v", receivedFileSize, req.UploadData.FileSize)
	if int64(receivedFileSize) < req.UploadData.FileSize {
		return e.getUploadResponseWithError(req, http.StatusInternalServerError, commontools.Errorf(nil, "receivedFileSize not match"))
	}

	//create a new bucket and push the file into it.
	//response with IPNS links or err
	threadKey, bucketKey, encryptedUrl, err := textilehelper.CreateBucketAndPushData(req.UploadData.OwnerId+"."+commontools.GetUlid().String(), req.UploadData.FileName, req.UploadData.FileBytes, true)
	if err != nil {
		return e.getUploadResponseWithError(req, http.StatusInternalServerError, commontools.Errorf(err, "textilehelper.CreateBucketAndPushData failed"))
	}

	//TODO: generate preview according to fileType
	//for now save the same file without encryption
	_, _, previewUrl, err := textilehelper.CreateBucketAndPushData(req.UploadData.OwnerId+"."+commontools.GetUlid().String(), req.UploadData.FileName, req.UploadData.FileBytes, false)
	if err != nil {
		return e.getUploadResponseWithError(req, http.StatusInternalServerError, commontools.Errorf(err, "textilehelper.CreateBucketAndPushData preview failed"))
	}

	contentData := models.ContentData{
		//Id:           "",   //to be generated by textile
		OwnerId:              req.UploadData.OwnerId,
		FileName:             req.UploadData.FileName,
		FileType:             req.UploadData.FileType,
		FileSize:             req.UploadData.FileSize,
		Description:          req.UploadData.Description,
		ThreadKey:            threadKey,
		BucketKey:            bucketKey,
		EncryptedUrl:         encryptedUrl,
		PreviewUrl:           previewUrl + "/" + req.UploadData.FileName,
		ReceivedAt:           receivedAt,
		UpdatedAt:            commontools.GetTimeStampMillisecond(),
	}
	logger.Infof("Saving contentData to DB: %+v", contentData)
	instanceId, err := textilehelper.InsertToContentDB(&contentData)
	if err != nil {
		return e.getUploadResponseWithError(req, http.StatusInternalServerError, commontools.Errorf(err, "textilehelper.InsertToContentDB failed"))
	}

	//all done, return a success response
	return &pb.UploadResponse{
		MessageData:          e.node.NewMessageData(req.MessageData.Id, false),
		ResponseData:         &pb.ResponseData{
			Code:                 http.StatusOK,
			Err:                  "",
		},
		ContentData:          &pb.ContentData{
			Id:                   instanceId,
			OwnerId:              req.UploadData.OwnerId,
			FileName:             req.UploadData.FileName,
			FileType:             req.UploadData.FileType,
			FileSize:             req.UploadData.FileSize,
			Description:          req.UploadData.Description,
			ThreadKey:            threadKey,
			BucketKey:            bucketKey,
			EncryptedUrl:         encryptedUrl,
			PreviewUrl:           previewUrl + "/" + req.UploadData.FileName,
			ReceivedAt:           receivedAt,
			UpdatedAt:            commontools.GetTimeStampMillisecond(),
		},
	}
}

func CompactLogUploadRequest(req *pb.UploadRequest) {
	logger.Info("req: ", req.UploadData.OwnerId, " ",
		req.UploadData.Description, " ",
		req.UploadData.FileSize, " ",
		req.UploadData.GeneratePreview,
	)
}

// remote peer requests handler
func (e *UploadProtocol) onUploadRequest(s network.Stream) {
	// get request data
	req := &pb.UploadRequest{}
	buf, err := ioutil.ReadAll(s)
	if err != nil {
		s.Reset()
		logger.Error(err)
		return
	}
	s.Close()

	// unmarshal it
	proto.Unmarshal(buf, req)
	if err != nil {
		logger.Error(err)
		return
	}
	logger.Infof("%s Received upload request from %s", s.Conn().LocalPeer(), s.Conn().RemotePeer())
	CompactLogUploadRequest(req)

	//authenticateMessage
	valid := e.node.authenticateMessage(req, req.MessageData)
	if !valid {
		logger.Errorf("Failed to authenticate message")
		return
	}

	// process request with textile
	resp := e.processUploadRequest(req)

	// sign the data
	signature, err := e.node.signProtoMessage(resp)
	if err != nil {
		logger.Errorf("failed to sign response")
		return
	}
	// add the signature to the message
	resp.MessageData.Sign = signature

	// send the response
	ok := e.node.sendProtoMessage(s.Conn().RemotePeer(), uploadResponseProtocolName, resp)
	if ok {
		logger.Infof("%s done sending response to %s", s.Conn().LocalPeer().String(), s.Conn().RemotePeer().String())
	}
}

// upload response handler
func (e *UploadProtocol) onUploadResponse(s network.Stream) {

	resp := &pb.UploadResponse{}
	buf, err := ioutil.ReadAll(s)
	if err != nil {
		s.Reset()
		logger.Error(err)
		return
	}
	s.Close()

	// unmarshal it
	proto.Unmarshal(buf, resp)
	if err != nil {
		logger.Error(err)
		return
	}

	// authenticate message content
	valid := e.node.authenticateMessage(resp, resp.MessageData)

	if !valid {
		logger.Errorf("Failed to authenticate message")
		return
	}

	// locate request data and remove it if found
	_, ok := e.requests[resp.MessageData.Id]
	if ok {
		// remove request from map as we have processed it here
		delete(e.requests, resp.MessageData.Id)
	} else {
		logger.Errorf("Failed to locate request data object for response")
		return
	}

	logger.Infof("%s Received upload response from %s. Message id:%s. resp: %+v", s.Conn().LocalPeer(), s.Conn().RemotePeer(), resp.MessageData.Id, resp)
}

//return (req.MessageData.Id, error)
func (e *UploadProtocol) UploadTo(peerId peer.ID, uploadData *pb.UploadData) (string, error) {
	logger.Infof("%s sending upload request to %s", e.node.ID(), peerId)

	// create message data
	req := &pb.UploadRequest{
		MessageData:          e.node.NewMessageData(commontools.GetUlid().String(), false),
		UploadData:           uploadData,
	}

	signature, err := e.node.signProtoMessage(req)
	if err != nil {
		logger.Errorf("failed to sign message")
		return "", err
	}

	// add the signature to the message
	req.MessageData.Sign = signature

	ok := e.node.sendProtoMessage(peerId, uploadRequestProtocolName, req)
	if !ok {
		return "", commontools.Errorf(nil, "e.node.sendProtoMessage failed")
	}

	// store request so response handler has access to it
	e.requests[req.MessageData.Id] = req
	logger.Infof("%s Done sending request to %s. req.MessageData.Id: %s", e.node.ID(), peerId, req.MessageData.Id)
	return req.MessageData.Id, nil
}
